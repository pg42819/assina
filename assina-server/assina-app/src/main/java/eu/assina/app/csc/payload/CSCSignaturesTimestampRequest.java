package eu.assina.app.csc.payload;

/**
 * Body for request of signatures/timestamp for generating timestamp tokens for hashes.
 * From section 11.10 of the CSC API V_1.0.4.0 spec
 */
public class CSCSignaturesTimestampRequest {

    // REQUIRED
    // The Base64-encoded hash value to be time stamped.
    // The remote service SHALL use this value to encode the value of MessageImprint
    // .hashedMessage as defined in RFC 3161 [2].
    private String hash;

    // REQUIRED
    // The OID of the algorithm used to calculate the hash value.
    // The remote service SHALL use this value to encode the value of
    // MessageImprint.hashAlgorithm as defined in RFC 3161 [2].
    private String hashAlgo;

    // OPTIONAL
    // A large random number with a high probability that it is generated by the signature
    // application only once. The value SHALL be represented as hex-encoded string.
    private String nonce;

    // OPTIONAL
    // The clientData as defined in the Input parameter table in section 8.3.2.
    private String clientData;

    public String getHash() {
        return hash;
    }

    public void setHash(String hash) {
        this.hash = hash;
    }

    public String getHashAlgo() {
        return hashAlgo;
    }

    public void setHashAlgo(String hashAlgo) {
        this.hashAlgo = hashAlgo;
    }

    public String getNonce() {
        return nonce;
    }

    public void setNonce(String nonce) {
        this.nonce = nonce;
    }

    public String getClientData() {
        return clientData;
    }

    public void setClientData(String clientData) {
        this.clientData = clientData;
    }
}
